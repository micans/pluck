

cargo run -- 0 src/data.txt

--

use std::io::{self, Read};
Is functionally the same as:

use std::io;
use std::io::Read;

--

use std::env;

fn main() {
    let args: Vec<String> = env::args().collect();

    let arg = match args.get(2) {
        Some(val) => val,
        None => {
            println!("Not enough arguments provided!");
            return;
        }
    };

    let min_no_of_bytes = match arg.parse::<u64>() {
        Ok(val) => val,
        Err(e) => {
            println!("Unable to parse number from argument: {}", e);
            return;
        }
    };

    let no_of_times_to_repeat = min_no_of_bytes as usize;
    let inputtext = '0'.to_string().repeat(no_of_times_to_repeat);

    println!("{}", inputtext);
}

--

https://docs.rs/clap/latest/clap/

cargo add clap --features derive

use clap::Parser;

/// Simple program to greet a person
#[derive(Parser, Debug)]
#[command(version, about, long_about = None)]
struct Args {
    /// Name of the person to greet
    #[arg(short, long)]
    name: String,

    /// Number of times to greet
    #[arg(short, long, default_value_t = 1)]
    count: u8,
}

fn main() {
    let args = Args::parse();

    for _ in 0..args.count {
        println!("Hello {}!", args.name);
    }
}


